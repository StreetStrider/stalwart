#! /usr/bin/env node

var fs = require('fs-sync')
var read  = fs.read
var write = fs.write

var root = require('./lib/rootpath')
var dump = require('./lib/dump')

var schema = require(root('schema/as-css'))
var schema_hexa = require(root('schema/as-hexa'))

{
	var mustache = require('mustache')

	var css_template = read(root('template/css.mst'))
	var css = mustache.render(css_template, schema)

	write(root('gen/gen.css'), css)
}

{
	var pug = require('pug')

	var html_template = read(root('template/index.pug'))
	var html = pug.render(html_template,
	{
		pretty: true,
		schema: schema
	})

	write(root('gen/index.html'), html)
	fs.copy(root('template/static.css'), root('gen/static.css'), { force: true })
}

{
	write(root('schema/as-css.json'), dump(schema) + '\n')
	write(root('schema/as-hexa.json'), dump(schema_hexa) + '\n')
}

{
	function traverse (tree, prefix = [ 'stalwart'])
	{
		var r = []

		for (var key in tree)
		{
			var value = tree[key]

			if (typeof value === 'string')
			{
				var pkey = prefix.concat(key).join('__')

				r.push([ pkey, value ])
			}
			else if (Array.isArray(value))
			{
			}
			else if (Object(value) === value)
			{
				r = r.concat(traverse(value, prefix.concat(key)))
			}
		}

		return r
	}

	var pairs = traverse(schema)
	var lines = pairs.map(([ key, value ]) =>
	{
		return `@${ key }: ${ value };`
	})

	var text = '\n' + lines.join('\n') + '\n'

	write(root('schema/schema.less'), text)
}
